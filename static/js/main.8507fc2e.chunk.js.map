{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GITHUB_URL","App","state","user","active","handleClickMeButt","event","fetch","then","response","json","githubInfo","_this","setState","console","log","catch","err","concat","prevState","react_default","a","createElement","className","lib","onClick","this","class","horizontal","header","image","avatar_url","actions","href","blog","target","name","login","public_repos","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAIMA,EAAa,wCAmDJC,6MAhDbC,MAAQ,CACNC,KAAM,GACNC,QAAQ,KAGVC,kBAAoB,SAAAC,GAClBC,MAAMP,GACHQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,EAAKC,SAAS,CAAEV,KAAMQ,IACtBG,QAAQC,IAAI,CAAEJ,iBAGfK,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAR,GAAAG,OAAeD,EAAf,yBAChBL,EAAKC,SAAS,SAAAM,GAAS,MAAK,CAE1Bf,QAASe,EAAUf,mFAKrB,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,UAAD,KACEJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uDAAuDE,QAASC,KAAKrB,mBAAmBe,EAAAC,EAAAC,cAAA,KAAGK,MAAM,kBAAT,eACpGD,KAAKxB,MAAME,OACVgB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAMI,YAAU,EACdC,OACET,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWM,MAAOJ,KAAKxB,MAAMC,KAAK4B,aAEpCC,QAAS,CAACZ,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,KAAGW,KAAMP,KAAKxB,MAAMC,KAAK+B,KAAMC,OAAO,UAAUT,KAAKxB,MAAMC,KAAK+B,SAExFd,EAAAC,EAAAC,cAAA,kBAAUI,KAAKxB,MAAMC,KAAKiC,MAC1BhB,EAAAC,EAAAC,cAAA,sBAAcI,KAAKxB,MAAMC,KAAKkC,OAC9BjB,EAAAC,EAAAC,cAAA,iCAAyBI,KAAKxB,MAAMC,KAAKmC,gBAG3C,cAzCIC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.8507fc2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Button, Card, CardTitle, Container } from 'react-materialize';\n\nconst GITHUB_URL = \"https://api.github.com/users/mhoelzer\";\n\nclass App extends Component {\n  state = {\n    user: {},\n    active: false\n  };\n\n  handleClickMeButt = event => {\n    fetch(GITHUB_URL)\n      .then(response => response.json())\n      .then(githubInfo => {\n        this.setState({ user: githubInfo });\n        console.log({ githubInfo });\n        // console.log({user: githubInfo}); // same as above\n      })\n      .catch(err => console.log(`${err} error error error`));\n    this.setState(prevState => ({\n      // console.log(\"hellojolnl,\")\n      active: !prevState.active\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <br />\n        <Container>\n          <a className=\"orange btn-floating btn-large waves-effect waves-red\" onClick={this.handleClickMeButt}><i class=\"material-icons\">music_note</i></a>\n          {this.state.active ?\n            <div>\n              {/* <Button floating large className=\"orange btn-large waves-effect waves-red\" onClick={this.handleClickMeButt} icon=\"clear\"></Button>  --> if do this, put the above where null is */}\n              <Card horizontal\n                header={\n                  <CardTitle image={this.state.user.avatar_url} />\n                }\n                actions={[<p>Portfolio: <a href={this.state.user.blog} target=\"_blank\">{this.state.user.blog}</a></p>]}\n              >\n                <p>Name: {this.state.user.name}</p>\n                <p>Username: {this.state.user.login}</p>\n                <p>Public Repositories: {this.state.user.public_repos}</p>\n              </Card>\n            </div>\n            : null}\n          {/* could also do this.state.active && ... and leave off the : null */}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}